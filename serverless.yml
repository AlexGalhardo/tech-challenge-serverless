org: alexgalhardo
app: tech-challenge-serverless
service: tech-challenge-serverless
frameworkVersion: "3"

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-offline-local-authorizers-plugin

custom:
  DynamoUsersTableName: 'users-tech-challenge-serverless-${sls:stage}'
  DynamoRateLimitTableName: 'rate-limit-tech-challenge-serverless-${sls:stage}'
  DynamoEventsTableName: 'events-tech-challenge-serverless-${sls:stage}'

  esbuild:
    exclude: []
    sourcemap: true
    watch:
      pattern: "src/**/*"

  serverless-offline:
    noPrependStageInUrl: true

provider:
  name: aws
  runtime: nodejs20.x
  stage: sdx
  region: us-east-1
  environment:
    WORKSPACE: sdx
    DYNAMO_TABLE_RATE_LIMIT: 'rate-limit-tech-challenge-serverless-sdx'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            # - dynamodb:UpdateItem
            # - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:BatchGetItem
            # - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ RateLimitTable, Arn ]
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            # - dynamodb:UpdateItem
            # - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ EventsTable, Arn ]

functions:
  user-post:
    handler: src/controllers/user/post/index.handler
    events:
      - http:
          method: post
          path: /users

  user-get:
    handler: src/controllers/user/get/index.handler
    events:
      - http:
          method: get
          path: /users/{id}

  rate-limit-post:
    handler: src/controllers/rate-limit/post/index.handler
    events:
      - http:
          method: post
          path: /rate-limit/{id}

  rate-limit-get:
    handler: src/controllers/rate-limit/get/index.handler
    events:
      - http:
          method: get
          path: /rate-limit/{id}

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.DynamoUsersTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

    RateLimitTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.DynamoRateLimitTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.DynamoEventsTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
